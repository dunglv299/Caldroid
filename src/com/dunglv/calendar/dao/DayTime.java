package com.dunglv.calendar.dao;

import com.dunglv.calendar.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table DAY_TIME.
 */
public class DayTime {

    private Long id;
    private Integer dayId;
    private long rotaId;
    private Long startTime;
    private Long endTime;
    private Double hourWorking;
    private Boolean isSyncGoogle;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DayTimeDao myDao;

    private Rota rota;
    private Long rota__resolvedKey;


    public DayTime() {
    }

    public DayTime(Long id) {
        this.id = id;
    }

    public DayTime(Long id, Integer dayId, long rotaId, Long startTime, Long endTime, Double hourWorking, Boolean isSyncGoogle) {
        this.id = id;
        this.dayId = dayId;
        this.rotaId = rotaId;
        this.startTime = startTime;
        this.endTime = endTime;
        this.hourWorking = hourWorking;
        this.isSyncGoogle = isSyncGoogle;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDayTimeDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getDayId() {
        return dayId;
    }

    public void setDayId(Integer dayId) {
        this.dayId = dayId;
    }

    public long getRotaId() {
        return rotaId;
    }

    public void setRotaId(long rotaId) {
        this.rotaId = rotaId;
    }

    public Long getStartTime() {
        return startTime;
    }

    public void setStartTime(Long startTime) {
        this.startTime = startTime;
    }

    public Long getEndTime() {
        return endTime;
    }

    public void setEndTime(Long endTime) {
        this.endTime = endTime;
    }

    public Double getHourWorking() {
        return hourWorking;
    }

    public void setHourWorking(Double hourWorking) {
        this.hourWorking = hourWorking;
    }

    public Boolean getIsSyncGoogle() {
        return isSyncGoogle;
    }

    public void setIsSyncGoogle(Boolean isSyncGoogle) {
        this.isSyncGoogle = isSyncGoogle;
    }

    /** To-one relationship, resolved on first access. */
    public Rota getRota() {
        long __key = this.rotaId;
        if (rota__resolvedKey == null || !rota__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            RotaDao targetDao = daoSession.getRotaDao();
            Rota rotaNew = targetDao.load(__key);
            synchronized (this) {
                rota = rotaNew;
            	rota__resolvedKey = __key;
            }
        }
        return rota;
    }

    public void setRota(Rota rota) {
        if (rota == null) {
            throw new DaoException("To-one property 'rotaId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.rota = rota;
            rotaId = rota.getId();
            rota__resolvedKey = rotaId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
