package com.dunglv.calendar.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.dunglv.calendar.dao.DayTime;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table DAY_TIME.
*/
public class DayTimeDao extends AbstractDao<DayTime, Long> {

    public static final String TABLENAME = "DAY_TIME";

    /**
     * Properties of entity DayTime.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DayId = new Property(1, Integer.class, "dayId", false, "DAY_ID");
        public final static Property RotaId = new Property(2, long.class, "rotaId", false, "ROTA_ID");
        public final static Property StartTime = new Property(3, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(4, Long.class, "endTime", false, "END_TIME");
        public final static Property HourWorking = new Property(5, Integer.class, "hourWorking", false, "HOUR_WORKING");
        public final static Property IsSyncGoogle = new Property(6, Boolean.class, "isSyncGoogle", false, "IS_SYNC_GOOGLE");
    };

    private DaoSession daoSession;

    private Query<DayTime> rota_DayTimeListQuery;

    public DayTimeDao(DaoConfig config) {
        super(config);
    }
    
    public DayTimeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'DAY_TIME' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'DAY_ID' INTEGER," + // 1: dayId
                "'ROTA_ID' INTEGER NOT NULL ," + // 2: rotaId
                "'START_TIME' INTEGER," + // 3: startTime
                "'END_TIME' INTEGER," + // 4: endTime
                "'HOUR_WORKING' INTEGER," + // 5: hourWorking
                "'IS_SYNC_GOOGLE' INTEGER);"); // 6: isSyncGoogle
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'DAY_TIME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DayTime entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer dayId = entity.getDayId();
        if (dayId != null) {
            stmt.bindLong(2, dayId);
        }
        stmt.bindLong(3, entity.getRotaId());
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(4, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime);
        }
 
        Integer hourWorking = entity.getHourWorking();
        if (hourWorking != null) {
            stmt.bindLong(6, hourWorking);
        }
 
        Boolean isSyncGoogle = entity.getIsSyncGoogle();
        if (isSyncGoogle != null) {
            stmt.bindLong(7, isSyncGoogle ? 1l: 0l);
        }
    }

    @Override
    protected void attachEntity(DayTime entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DayTime readEntity(Cursor cursor, int offset) {
        DayTime entity = new DayTime( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // dayId
            cursor.getLong(offset + 2), // rotaId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // startTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // endTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // hourWorking
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0 // isSyncGoogle
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DayTime entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDayId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setRotaId(cursor.getLong(offset + 2));
        entity.setStartTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setHourWorking(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsSyncGoogle(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DayTime entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DayTime entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dayTimeList" to-many relationship of Rota. */
    public List<DayTime> _queryRota_DayTimeList(long rotaId) {
        synchronized (this) {
            if (rota_DayTimeListQuery == null) {
                QueryBuilder<DayTime> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.RotaId.eq(null));
                rota_DayTimeListQuery = queryBuilder.build();
            }
        }
        Query<DayTime> query = rota_DayTimeListQuery.forCurrentThread();
        query.setParameter(0, rotaId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getRotaDao().getAllColumns());
            builder.append(" FROM DAY_TIME T");
            builder.append(" LEFT JOIN ROTA T0 ON T.'ROTA_ID'=T0.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DayTime loadCurrentDeep(Cursor cursor, boolean lock) {
        DayTime entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Rota rota = loadCurrentOther(daoSession.getRotaDao(), cursor, offset);
         if(rota != null) {
            entity.setRota(rota);
        }

        return entity;    
    }

    public DayTime loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DayTime> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DayTime> list = new ArrayList<DayTime>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DayTime> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DayTime> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
